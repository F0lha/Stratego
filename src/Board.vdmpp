class Board

-- Position is a pair of coordenates
types
		public Position:: x:nat  y:nat;
		public PType = <BOMB> | <MARSHALL> | <GENERAL> | <COLONEL> | <MAJOR> | <CAPTAIN> | <LIEUTENANT> | <SERGEANT> | <MINER> | <SCOUT> | <SPY> | <FLAG>;
values
-- TODO Define values here
		private max_coord : nat = 9;
instance variables

	private board : map Position to Cell := {|->};
	private pieces : map  Position to Piece := {|->};
-- TODO Define instance variables here
operations
-- TODO Define operations here

		public Board : () ==> Board
  	Board() ==
  	(
  		for i = 0 to max_coord by 1 do
  		(
  			for j = 0 to max_coord by 1 do
  			(
  				 board := board ++ {mk_Position(i,j)|-> new Cell(i,j)};
  			)
  		)
		);

  public pure validCoords : Position ==> bool
  validCoords(position) ==
  (
  	return position.x < max_coord and position.y < max_coord;
  );
  
  public pure freeSpace : Position ==> bool
  freeSpace(position) == 
  (
  	return board(position).isOccupied();
  )
  pre validCoords(position);
  
  public pure hasPiece : Position ==> bool
  hasPiece(position) == return position in set dom pieces;
  
  public placePiece : nat*nat*Piece`PType*Piece`PColor ==> ()
  placePiece(i,j,type,color) == 
  (
  	dcl piece : Piece := new Piece(type,color);
  	pieces := pieces ++ {mk_Position(i,j)|-> piece};
  	board(mk_Position(i,j)).setPiece(piece);
  )
  pre freeSpace(mk_Position(i,j));
  
  
  -- responsible for making a move
  public makeMove : Position*Position*Piece`PColor ==> bool
  makeMove(origin,destination,color) == 
  (
  	dcl pieceOrigin : [Piece] := board(origin).getPiece();
  	dcl pieceDestination : [Piece] := board(destination).getPiece();
  	
  	if movePossible(origin,destination,pieceOrigin.hasUnlimitedRange())
  		then
		  	if movePieces(pieceOrigin,pieceDestination) 
		  	then movePieces(pieceOrigin,pieceDestination) 
	  		else	return false
	  	else return false;
  )pre validCoords(origin) and validCoords(destination) and hasPiece(origin);
  
  public movePieces : [Piece]*[Piece] ==> bool
  movePieces(pieceOrigin,pieceDestination) == 
  (
  		dcl interaction : bool := getInteraction(pieceOrigin,pieceDestination);
  		return true;
  )
  pre (pieceOrigin = nil or pieceDestination = nil) and pieceOrigin.getColor() <> pieceDestination.getColor() and pieceOrigin.canMove();
  	
  
	--true if it eats the second piece, false if the second piece its stronger
  public pure getInteraction : Piece * Piece ==> bool
	getInteraction(origin,destination) == (
		dcl originType : PType := origin.getType();
		dcl destinationType : PType := destination.getType();
		cases originType :
		<MINER> -> return destinationType = <BOMB>,
		<SPY> -> return destinationType = <MARSHALL>,
		others -> strongerPiece(originType,destinationType)
		end
	);
	
	
	public pure movePossible : Position*Position*bool ==> bool
	movePossible(origin,destination,range) == 
	(
		if range
			then return isFreeLane(origin,destination)
			else if origin.x = destination.x
				then return abs(origin.y - destination.y) = 1
				else return abs(origin.x - destination.x) = 1;
	) 
	pre origin.x = destination.x or origin.y =destination.y;
	
	--TODO todo
	public pure isFreeLane : Position*Position ==> bool
	isFreeLane(origin,destination) == return true;
  
functions
-- TODO Define functiones here
	--get index of type of piece
	public getIndex : PType -> nat
	getIndex(type) ==
	(
		iota i in set inds Stratego`TYPES_OF_PIECES & Stratego`TYPES_OF_PIECES(i) = type
	);
	
	public strongerPiece : PType*PType -> bool
	strongerPiece(originType,destinationType) == (
		 getIndex(originType) > getIndex(destinationType)
	);

	
traces
-- TODO Define Combinatorial Test Traces here
end Board