class Cell
types
	public Position :: x:nat y:nat;
instance variables
	private position : Position;
	private piece :  [Piece] := nil;
	private water : bool := false;
	private occupied : bool := false;
	
	--Invariants
	inv occupied= true <=> piece <> nil;
	inv water = true => piece = nil and occupied = false;
operations
		public Cell : nat * nat ==> Cell
  	Cell(x,y) ==
  	(
  		position := mk_Position(x,y);
  		water := isWater(position);
		);
	
	public setPiece : Piece ==> ()
	setPiece(pie) == 
	(
		atomic(
			piece := pie;
			occupied := true;
			)
	)
	pre occupied = false and piece = nil and water = false
	post occupied = true and piece <> nil;
	
	public removePiece : () ==> ()
	removePiece() == 
	(
		atomic(
			piece := nil;
			occupied := false;
		)
	)
	pre occupied = true and piece <> nil and water = false
	post occupied = false and piece = nil;
	
	public pure isOccupied : () ==> bool
	isOccupied() == return occupied or water;
	
	public pure getPiece : () ==> [Piece]
	getPiece() == return piece;
		
	public pure isWater : Position ==> bool
	isWater(pos) ==
	(
		return (pos.x = 2 or pos.x = 3 or pos.x = 6 or pos.x = 7) and (pos.y = 4 or pos.y = 5);
	);
end Cell