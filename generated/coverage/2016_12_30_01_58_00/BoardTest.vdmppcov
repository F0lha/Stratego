class BoardTest is subclass of TestCase
        instance variables
                s : Board := new Board();
        operations          
                private testValidCoords: () ==> ()
                testValidCoords() ==
                (
                        assertEqual(true,s.validCoords(mk_Board`Position(0,0)));
                        
                        assertEqual(true,s.validCoords(mk_Board`Position(9,5)));
                        
                        assertEqual(false,s.validCoords(mk_Board`Position(15,5)));
                );
                
                private testFreeSpace: () ==> ()
                testFreeSpace() ==
                (
                        assertEqual(true,s.freeSpace(mk_Board`Position(0,0)));
                        
                        assertEqual(false,s.freeSpace(mk_Board`Position(2,5)));
                        
                        assertEqual(false,s.freeSpace(mk_Board`Position(3,4)));
                        
                        assertEqual(true,s.freeSpace(mk_Board`Position(9,9)));
                        
                        --TODO pecas
                );
                
                private testHasPiece: () ==> ()
                testHasPiece() ==
                (
                assertEqual(false,s.hasPiece(mk_Board`Position(0,0)));
               
                );
                
                private placePiece: () ==> ()
                placePiece() ==
                (
                				s.placePiece(0,0,<BOMB>,<BLUE>);
                				
                				s.placePiece(4,5,<BOMB>,<BLUE>);
                				
                				
                        
                        assertEqual(false,s.freeSpace(mk_Board`Position(2,5)));
                        
                        assertEqual(false,s.freeSpace(mk_Board`Position(3,4)));
                        
                        assertEqual(true,s.freeSpace(mk_Board`Position(9,9)));
                        
                        --TODO pecas
                );
                
                  private possibleMove: () ==> ()
                possibleMove() ==
                (
                		assertEqual(true,s.movePossible(mk_Board`Position(0,0),mk_Board`Position(0,1),false));
                		assertEqual(true,s.movePossible(mk_Board`Position(1,3),mk_Board`Position(2,3),false));
                		assertEqual(true,s.movePossible(mk_Board`Position(1,3),mk_Board`Position(2,3),true));
                		assertEqual(false,s.movePossible(mk_Board`Position(50,0),mk_Board`Position(50,50),false));
                		assertEqual(true,s.movePossible(mk_Board`Position(1,0),mk_Board`Position(9,0),true));
                );
                
                private makeMove: () ==> ()
                 makeMove() ==
                (
                		assertEqual(true,s.makeMove(mk_Board`Position(0,0),mk_Board`Position(0,1),<BLUE>));
          
                );
                
                
                public static main: () ==> ()
                main() ==
                (
                        dcl test : BoardTest := new BoardTest();
                        test.testValidCoords();
                        test.testFreeSpace();
                        test.testHasPiece();
                        test.placePiece();
                        test.possibleMove();
                        test.makeMove();
                );
end BoardTest